"""surveys コンテナー向けの講座アンケート結果データを生成するスクリプト。

生成内容:
  dataset/surveys.json  (配列)

フィールド (英語のフィールド名 / 値は日本語コメント):
  - courseId:        講座ID (courses コンテナーの id)
  - userId:          ユーザID (users コンテナーの id)
  - satisfactionRating (1-5)
  - satisfactionComment (文字列)
  - difficultyRating (1-5)
  - difficultyComment (文字列)
  - improvementRequest (要望 / 30% は空文字)

ロジック:
  - Cosmos DB の courses / users から全件取得
  - 各ユーザについてランダムに複数 (SURVEYS_PER_USER, 既定 2) の講座を抽出し回答を生成
  - レーティングは分布を少し高め (満足度 4,5 が多め) 難易度は中庸 3 が中心

環境変数:
  COSMOS_ENDPOINT, COSMOS_KEY (必須)
  COSMOS_DB (既定 course-surveys)
  COSMOS_COURSES_CONTAINER (既定 courses)
  COSMOS_USERS_CONTAINER   (既定 users)
  SURVEYS_PER_USER (既定 2)

出力のみ行い DB への書き込みはしない。投入は import_surveys.py を使用。
"""
from __future__ import annotations
import os
import json
import random
from pathlib import Path
from typing import Any, List, Dict
from azure.cosmos import CosmosClient  # type: ignore
from dotenv import load_dotenv  # type: ignore

OUTPUT_FILE = Path("dataset") / "surveys.json"

def load_env():
    root_env = Path(__file__).resolve().parents[1] / ".env"
    if root_env.exists():
        load_dotenv(root_env, override=False)
    dataset_env = Path(__file__).parent / ".env"
    if dataset_env.exists():
        load_dotenv(dataset_env, override=True)
    endpoint = os.getenv("COSMOS_ENDPOINT")
    key = os.getenv("COSMOS_KEY")
    if not endpoint or not key:
        raise SystemExit("環境変数 COSMOS_ENDPOINT, COSMOS_KEY を設定してください")
    return {
        "endpoint": endpoint,
        "key": key,
        "db": os.getenv("COSMOS_DB", "course-surveys"),
        "courses": os.getenv("COSMOS_COURSES_CONTAINER", "courses"),
        "users": os.getenv("COSMOS_USERS_CONTAINER", "users"),
        "per_user": int(os.getenv("SURVEYS_PER_USER", "2")),
    }


SAT_COMMENTS = {
    5: [
        "非常に満足しています。講師の説明が具体例を交えて分かりやすかったです。",
        "期待以上の内容でした。直後の業務改善ミーティングで早速活用できました。",
        "実務にすぐ活かせる素晴らしい講座でした。補助資料も充実しており復習が容易です。",
        "演習→フィードバックの流れが洗練されていて学習定着を強く感じました。",
        "双方向性が高く飽きずに最後まで集中できました。追加開催を希望します。",
        "体系化されたフレームワーク説明と現場事例のバランスが完璧でした。",
        "講師のファシリテーションが巧みで質問しやすい雰囲気が醸成されていました。",
        "期待していた論点を全て網羅しさらに深掘り解説まで得られて大満足です。",
        "復習課題が程よくアウトプット設計も洗練されていて理解が定着しました。",
        "現場シナリオを段階的に分解する進め方が実務思考に直結して良かったです。",
        "抽象概念を可視化する図解が秀逸でチーム共有資料に転用しやすいと感じました。",
        "チャットでの質問にも即応してもらえストレスなく学べました。",
        "学習ゴールの再掲が適切なタイミングで挿入され集中力を維持できました。",
        "グループディスカッションのテーマ設定が実務課題と高い親和性でした。",
        "チェックリスト形式のまとめ資料が後工程を具体化する助けになりました。",
        "講師の経験談が抽象→具体の橋渡しになり理解スピードが加速しました。",
        "段階的に難度が上がり成功体験を積みながら習得できる構造が優れていました。",
        "課題へのフィードバックが粒度高く改善ポイントが即把握できました。",
        "想定質問を先回りして説明してくれるため疑問が溜まりませんでした。",
        "演習直後のミニ講評が記憶の固定化に有効でした。",
        "ケース横断の共通パターン抽出が価値高く再利用指針として使えます。",
        "追加参考資料のキュレーション品質が高く調査時間を大幅削減できました。",
        "前提知識の差異を吸収する導入パートが丁寧で全員が足並み揃いました。",
        "理論→演習→内省→共有のサイクルが明確で集中を最後まで保持できました。",
        "成果物テンプレートが現場投入可能なクオリティで即日活用しました。",
        "参加者間の相互フィードバック設計が学びの多層化に寄与していました。",
        "余白時間の小ネタ解説も有益でコスト感覚が織り込まれていました。",
        "総合的に投資対効果が極めて高い講座だと評価しています。",
    ],
    4: [
        "概ね満足です。細部でもう一歩踏み込んだ考察があれば満点でした。",
        "役立つポイントが多かったです。事前課題との連動性も高く準備がしやすかった。",
        "応用のヒントを得られた一方資料の図解がやや小さく読みづらい箇所がありました。",
        "演習時間が適切で理解度を確認しながら進められました。",
        "実例が現場に近く納得感が高かったです。復習ガイドがあればさらに良い。",
        "全体構成は整理されていましたが終盤のまとめがやや駆け足に感じました。",
        "質疑応答で多様な観点の質問が拾われ理解が深まりました。",
        "得られるアウトプットが明確で学習意図を維持しやすかったです。",
        "追加の深堀り資料リンクがあれば満足度はさらに上がったと思います。",
        "演習のフィードバック粒度が均一で差別化指針がもう少し欲しかったです。",
        "前半の理論パートは充実していたが後半の適用例がやや少なく感じました。",
        "議論を活性化する問いかけが効果的でした。",
        "休憩タイミングが適切で集中力を維持できました。",
        "軽微な資料の誤字が散見された点のみ惜しいです。",
        "社内共有しやすい要約フォーマットが提供されると最高です。",
        "演習の難度が一部バラついていた印象ですが概ね有益でした。",
        "期待値を上回る部分と下回る部分が混在したが総合的には満足です。",
        "具体数値例がもっとあると再現性評価がしやすいと感じました。",
        "ガイドライン化のヒントが多く次アクションを描きやすかったです。",
        "参加者同士の視点共有が整理され価値がありました。",
    ],
    3: [
        "普通です。基礎復習には十分ですが新しい気づきは限定的でした。",
        "一部は既知の内容でしたが社内共有用の共通言語としては有用と感じました。",
        "可もなく不可もなく。中級者向けの発展編があれば参加したいです。",
        "内容は整理されているものの密度が薄く集中力が途切れる場面がありました。",
        "演習がもう少し多様であれば満足度が上がったと思います。",
        "説明スライドは整っているが口頭補足に依存する箇所がやや多い印象です。",
        "実務転用の橋渡しが弱く抽象論で止まる場面がありました。",
        "概念導入が丁寧で初心者には良いが既習者には冗長に感じます。",
        "後半の集中度が下がる構成だったので再活性化の仕掛けが欲しいです。",
        "演習フィードバックが定型で個別指摘が少なかったです。",
        "アンケート結果を踏まえ次回改善されれば再受講も検討します。",
        "講師の経験談をもう少し体系立てて整理してほしいです。",
        "章ごとの学習ゴールが明示されると進捗把握が容易だったと思います。",
        "汎用性はあるが独自視点は少なく差別化要素は限定的でした。",
        "質疑の掘り下げが浅く十分な理解確認に至っていない箇所がありました。",
    ],
    2: [
        "やや物足りない構成でした。調査データや比較事例が少なく説得力に欠けました。",
        "想定より浅かったです。初学者向けを明示してほしいと感じました。",
        "もう少し演習が欲しかったです。受動的な時間が長く集中が続きませんでした。",
        "資料の要点が抽象的で持ち帰りの具体アクションに落とし込みづらかったです。",
        "説明スピードが均一で重要度の強弱が伝わりにくかったです。",
        "記載されているフレームが陳腐化している箇所がありアップデートが必要です。",
        "演習後の講評が浅く改善策の示唆が乏しかったです。",
        "現場課題との接続が弱く導入価値を示す説明が不足していました。",
        "セクション間のストーリー遷移が唐突で認知負荷が高まりました。",
        "差別化視点が提示されず既存知識の再整理に留まりました。",
        "時間配分が後ろ倒しとなり終盤が駆け足になりました。",
    ],
    1: [
        "満足できなかったです。紹介された手法が既に社内で利用済みでした。",
        "期待していた内容と異なりました。対象レベルの明確化が必要だと思います。",
        "改善が必要と感じました。議論が脱線し時間管理が不十分でした。",
        "受講目的に合致せず実務適用のイメージが湧きませんでした。",
        "インタラクションが少なく講義一方向で眠気を誘いました。",
        "資料の誤記が散見され品質面で信頼性が揺らぎました。",
        "論理展開が冗長で主要ポイントの輪郭が掴みにくかったです。",
        "参加者の疑問を十分拾えておらず不消化感が残りました。",
        "古い事例が多く最新動向とのギャップが気になりました。",
        "期待値調整がされておらずミスマッチが大きかったです。",
    ],
}

DIFF_COMMENTS = {
    5: [
        "難易度が高く歯応えがあり深い理解には追加復習が必須だと感じました。",
        "高度で復習が必要だが挑戦的で成長実感がありました。",
        "専門用語と抽象度が高く中級以上向け。補助資料が無かったら厳しかったと思います。",
        "演習が複合思考を要求し適切な負荷を超えて少しオーバーに感じました。",
        "知識統合を前提とした複線的な課題設計で集中力を強く要しました。",
        "抽象フレームと計量的評価の同時適用が高度で習熟が必要です。",
        "制約条件が頻繁に変動するシナリオで思考の柔軟性を試されました。",
        "複数解が成立する問題設定がメタ認知を促進し負荷は高いが有益でした。",
        "高速で前提が更新され把握に遅れが生じると巻き返しが困難でした。",
    ],
    4: [
        "やや難しかったですが段階的説明で何とか追従できました。",
        "考えながら進められ理解定着に有効な負荷レベルでした。",
        "集中していれば問題なく理解できるが事前知識ゼロだと厳しい可能性があります。",
        "後半の事例分析パートだけ難度が上がるので導入クッションが欲しいです。",
        "抽象→具体の切替が頻繁で少し認知負荷を感じました。",
        "計算量より概念比較の比重が高く思考整理の訓練になりました。",
        "初見語彙が適度に散りばめられており学習刺激になりました。",
        "同時並行で評価軸を意識する必要があり集中が要求されました。",
    ],
    3: [
        "ちょうど良い難易度で退屈せず挫折もせず進められました。",
        "適切なバランスでした。基礎→応用の橋渡しが滑らかです。",
        "要点を押さえつつ過剰に難化させない設計が好印象でした。",
        "難所の直前にミニ演習があり理解導線が丁寧でした。",
        "段階的に複雑性が増すが急激な跳ね上がりは無く安心して進めました。",
        "一般的な前提知識を持つ受講者なら問題無い平衡レベルです。",
        "確認質問タイミングが挿入され自己点検が容易でした。",
        "理論と実践が交互に現れ集中維持に寄与していました。",
    ],
    2: [
        "比較的易しかったです。復習なしで定着できそうです。",
        "復習なしで理解できたため追加チャレンジ課題が欲しくなりました。",
        "想定より平易で学習投資対効果が低く感じました。",
        "初学者向けとしては最適ですが再受講者には軽めです。",
        "段階ジャンプが少なく緊張感がやや不足しました。",
        "計算や推論の複雑性が限定的で負荷調整余地があります。",
        "抽象化プロセスが省略されており深い洞察形成には至りませんでした。",
        "質問用に難度の高い追加オプション課題があると嬉しいです。",
    ],
    1: [
        "非常に易しかったです。もう少し深度を追加してほしいです。",
        "もっと発展的な内容が欲しいと強く感じました。",
        "入門レベルで止まっており学習意欲を刺激しにくかったです。",
        "前提知識説明が長く本題が短かった印象です。",
        "基礎用語確認が大半で新規概念は極めて少なかったです。",
        "演習が単純再現で思考負荷が低すぎました。",
        "難度指標が公開されていれば受講判断を変えたかもしれません。",
        "応用シナリオがなく発展の方向性が見えませんでした。",
    ],
}

REQUESTS = [
    "演習問題をもっと増やしてほしい。特に応用ケースの追加を希望します。",
    "事例紹介を追加してほしい。業界別のバリエーションがあると嬉しいです。",
    "資料に索引があると助かる。後から特定の概念を引きたい場面があります。",
    "動画で復習できるコンテンツが欲しい。短いチャプター分割だと更に良いです。",
    "質疑応答の時間をもう少し長くしてほしい。口頭で深掘れる余地が残りました。",
    "関連する上級編も受講したい。中級→上級への学習パスを提示してほしいです。",
    "確認テストを追加し理解度セルフチェックを可能にしてほしい。",
    "社内事例を持ち寄るワークショップ形式の回を別途開催してほしい。",
    "配布スライドに補足脚注を追加して発展資料の参照元を知りたいです。",
    "ショートクイズ形式でインタラクティブ性を上げてほしい。",
    "ライブコーディング/ライブデモの時間を設けて実践感を高めてほしい。",
    "AI ツール活用の具体例をもう少し追加してほしい。",
    "追加の参考図書リストを提供してほしい。段階別推薦があると助かります。",
    "課題提出に対する個別フィードバックの粒度を上げてほしい。",
    "実務導入後のフォローアップセッションを開催してほしい。",
    "社内導入テンプレートを配布してほしい。",
    "ベストプラクティスとアンチパターンを対比で整理してほしい。",
    "成功事例だけでなく失敗事例の分析も増やしてほしい。",
    "成果測定指標(KPI)例をもう少し体系化してほしい。",
    "受講前診断テストでレベル別カリキュラム選択ができると良い。",
    "自主学習用の追加演習パックをダウンロード提供してほしい。",
    "ロールプレイの録画振り返り機能があると改善が加速しそうです。",
    "匿名質問ボックスを常設してほしい。",
    "終了後のアンケート集計レポートを共有してほしい。",
]

def compose_comment(pool: list[str]) -> str:
    # 40% の確率で 2 文、10% の確率で 3 文を連結 (重複しない)
    n = 1
    r = random.random()
    if r < 0.1 and len(pool) >= 3:
        n = 3
    elif r < 0.5 and len(pool) >= 2:
        n = 2
    chosen = random.sample(pool, k=n)
    return " ".join(chosen)


def weighted_choice(weights):
    total = sum(w for _, w in weights)
    r = random.uniform(0, total)
    upto = 0
    for value, w in weights:
        if upto + w >= r:
            return value
        upto += w
    return weights[-1][0]


def fetch_all(container) -> List[Dict[str, Any]]:
    return list(container.read_all_items(max_item_count=1000))


def generate(cfg):
    client = CosmosClient(cfg["endpoint"], credential=cfg["key"])
    db = client.get_database_client(cfg["db"])
    courses = fetch_all(db.get_container_client(cfg["courses"]))
    users = fetch_all(db.get_container_client(cfg["users"]))
    if not courses or not users:
        raise SystemExit("courses または users が空です")
    course_ids = [c["id"] for c in courses if "id" in c]
    surveys: List[Dict[str, Any]] = []
    per_user = max(1, cfg["per_user"])  # 少なくとも1
    for u in users:
        uid = u.get("id")
        if not uid:
            continue
        chosen = random.sample(course_ids, k=min(per_user, len(course_ids)))
        for cid in chosen:
            sat = weighted_choice([(5, 30), (4, 35), (3, 20), (2, 10), (1, 5)])
            diff = weighted_choice([(3, 30), (4, 25), (2, 20), (5, 15), (1, 10)])
            sat_comment = compose_comment(SAT_COMMENTS[sat])
            diff_comment = compose_comment(DIFF_COMMENTS[diff])
            # 要望は 70% で1文、15% で2文、残り空
            req = ""
            pr = random.random()
            if pr < 0.15:
                req = " ".join(random.sample(REQUESTS, k=2))
            elif pr < 0.85:
                req = random.choice(REQUESTS)
            surveys.append({
                "courseId": cid,
                "userId": uid,
                "satisfactionRating": sat,
                "satisfactionComment": sat_comment,
                "difficultyRating": diff,
                "difficultyComment": diff_comment,
                "improvementRequest": req,
            })
    return surveys


def main():
    cfg = load_env()
    data = generate(cfg)
    OUTPUT_FILE.parent.mkdir(parents=True, exist_ok=True)
    with OUTPUT_FILE.open("w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    print(f"Generated {len(data)} survey records -> {OUTPUT_FILE}")


if __name__ == "__main__":
    main()
